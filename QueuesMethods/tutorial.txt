using PegBank.Pages;
using System;
using System.Messaging;

namespace PegBank.Queues
{
    public class RegisterQueue
    {

        private string queueName = ".\\Private$\\registerCustomer";


        public MessageQueue registerCustomerQueue()
        {
            Message message = null;
            MessageQueue queue = null;
            try
            {
               
                if (MessageQueue.Exists(queueName))
                {
                    queue = new MessageQueue(queueName);
                }
                else
                {
                    queue = MessageQueue.Create(queueName);
                
                }
                return queue;
                

            }catch(Exception ex)
            {
                throw ex;
                return null;
            }
        }


        public void SendMessage(object[] paras)
        {
            Customer customer = new Customer();
            customer.fname = Convert.ToString(paras[0]);
            customer.lname = Convert.ToString(paras[1]);
            customer.telno = Convert.ToString(paras[2]);
            customer.email = Convert.ToString(paras[3]);
            MessageQueue queue = null;
            Message message = null;
            RegisterQueue obj = new RegisterQueue();
            try
            {
                queue = obj.registerCustomerQueue();
                message = new Message();
                message.Body = customer;
                message.Recoverable = true;
                queue.Send(message);

            }
            catch(Exception ex)
            {
                throw ex;
            }
          

        }


        public void SendPublic()
        {
            MessageQueue queue = new MessageQueue(".\\myQueue");
            queue.Send("public queue by path name");
            return;

        }

        public void SendPrivate()
        {
            MessageQueue queue = new MessageQueue(".private$\\myQueue");
            queue.Send("private queue by path name");
            return;
        }

        public void SendByLabel()
        {
            MessageQueue queue = new MessageQueue("Label.TheLabel");
            queue.Send("private queue by path name");
            return;
        }

        public void SendByFormatName()
        {
            MessageQueue myQueue = new MessageQueue("FormatName:Public=5A5F7535-AE9A-41d4" +
                "-935C-845C2AFF7112");
            myQueue.Send("Queue by format name.");

            return;
        }

        //References computer journal queues
        public void MonitorComputerJournal()
        {
            MessageQueue queue = new MessageQueue(".\\Journal$");
            while (true)
            {
                Message journalMessage = queue.Receive();
            }


        }



        // References queue journal queues.
        public void MonitorQueueJournal()
        {
            MessageQueue queueJournal = new
                MessageQueue(".\\myQueue\\Journal$");
            while (true)
            {
                Message journalMessage = queueJournal.Receive();
                // Process the journal message.
            }
        }

        // References dead-letter queues.
        public void MonitorDeadLetter()
        {
            MessageQueue deadLetter = new
                MessageQueue(".\\DeadLetter$");
            while (true)
            {
                Message deadMessage = deadLetter.Receive();
                // Process the dead-letter message.
            }
        }

        // References transactional dead-letter queues.
        public void MonitorTransactionalDeadLetter()
        {
            MessageQueue TxDeadLetter = new
                MessageQueue(".\\XactDeadLetter$");
            while (true)
            {
                Message txDeadLetter = TxDeadLetter.Receive();
                // Process the transactional dead-letter message.
            }
        }

        public class Customer{

            public string fname, lname, telno, email;

            };



        public void ReceiveMessage()
        {
          
            MessageQueue myQueue = new MessageQueue(".\\myQueue");
            myQueue.Formatter = new XmlMessageFormatter(new Type[]
                {typeof()});

            try
            {
     
                Message myMessage = myQueue.Receive();
                Customer customer= (Customer)myMessage.Body;
          
                Console.WriteLine("First Name: " +
                    customer.fname.ToString());
                Console.WriteLine("Last Name: " +
                    customer.lname.ToString());
                Console.WriteLine("Email: " +
                 customer.email.ToString());
                Console.WriteLine("Tel no: " +
                    customer.telno.ToString());
            }

            catch (MessageQueueException)
            {
               
            }
            catch (InvalidOperationException e)
            {
                Console.WriteLine(e.Message);
            }
            return;
        }









    }
}